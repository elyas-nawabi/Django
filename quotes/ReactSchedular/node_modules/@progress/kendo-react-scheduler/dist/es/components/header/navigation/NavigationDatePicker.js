var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { DatePicker } from '@progress/kendo-react-dateinputs';
import { useInternationalization } from '@progress/kendo-react-intl';
import { MS_PER_DAY } from '../../../constants';
import { Button } from '@progress/kendo-react-buttons';
import { useSchedulerDateFormatContext, useSchedulerDateRangeContext, useSchedulerDateContext, useSchedulerPropsContext } from '../../../context/SchedulerContext';
import { ZonedDate, getDate } from '@progress/kendo-date-math';
import { toUTCDateTime } from '../../../utils';
/** @hidden */
export var NavigationDatePicker = React.forwardRef(function (props, ref) {
    var timezone = useSchedulerPropsContext().timezone;
    var normalized = ZonedDate.fromLocalDate(props.value, timezone);
    var value = getDate(normalized);
    var handleChange = React.useCallback(function (event) {
        if (props.onChange) {
            var normalizedValue = ZonedDate.fromUTCDate(toUTCDateTime(event.value), timezone);
            props.onChange.call(undefined, __assign({}, event, { value: normalizedValue }));
        }
    }, [props.onChange]);
    return (React.createElement(DatePicker, __assign({ ref: ref, dateInput: EMPTY_DATE_INPUT, pickerWrap: EMPTY_PICKER_WRAP, toggleButton: SchedulerNavigationDatePickerToggleButton }, props, { value: value, onChange: handleChange })));
});
var EMPTY_DATE_INPUT = function () { return null; };
var EMPTY_PICKER_WRAP = function (props) { return React.createElement(React.Fragment, null, props.children); };
var SchedulerNavigationDatePickerToggleButton = function (props) {
    var intl = useInternationalization();
    var _a = useSchedulerDateFormatContext(), dateFormat = _a.dateFormat, shortDateFormat = _a.shortDateFormat;
    var dateRange = useSchedulerDateRangeContext();
    var date = useSchedulerDateContext()[0];
    var isMonthView = dateRange.end.getTime() - dateRange.start.getTime() > MS_PER_DAY * 27;
    var text = intl.format(dateFormat, isMonthView
        ? date
        : dateRange.zonedStart, isMonthView
        ? date
        : dateRange.zonedEnd.addDays(-1));
    var shortText = intl.format(shortDateFormat, isMonthView
        ? date
        : dateRange.zonedStart, isMonthView
        ? date
        : dateRange.zonedEnd.addDays(-1));
    return (React.createElement(Button, __assign({}, props, { className: "k-nav-current", tabIndex: -1, look: 'flat' }),
        React.createElement("span", { className: "k-icon k-i-calendar" }),
        React.createElement("span", { className: "k-sm-date-format" }, shortText),
        React.createElement("span", { className: "k-lg-date-format" }, text)));
};
//# sourceMappingURL=NavigationDatePicker.js.map