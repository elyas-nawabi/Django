import * as React from 'react';
import { SchedulerProps } from '../main';
import { DataItem, DateRange, SchedulerView, Group } from '../models';
import { DataAction } from '../Scheduler';
import { Fields } from '../models/Fields';
import { Orientation } from '../models/Orientation';
/** @hidden */
export interface SchedulerContextProps {
    children?: React.ReactNode;
    element: SchedulerElementContextType;
    props: SchedulerPropsContextType;
    views: SchedulerViewsContextType;
    fields: SchedulerFieldsContextType;
    groups: SchedulerGroupsContextType;
    dateRange: SchedulerDateRangeContextType;
    dateFormat: SchedulerDateFormatContextType;
    orientation: SchedulerOrientationContextType;
    date: SchedulerDateContextType;
    activeView: SchedulerActiveViewContextType;
    data: SchedulerDataContextType;
}
/** @hidden */
export declare type SchedulerElementContextType = React.RefObject<HTMLElement | null>;
/** @hidden */
export declare const SchedulerElementContext: React.Context<React.RefObject<HTMLElement>>;
/** @hidden */
export declare const useSchedulerElementContext: () => React.RefObject<HTMLElement>;
/**
 * Specifies the result of the [useSchedulerPropsContext]({% slug api_scheduler_useschedulerpropscontext %}) and [SchedulerPropsContext]({% slug api_scheduler_schedulerpropscontext %}).
 */
export declare type SchedulerPropsContextType = SchedulerProps;
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerPropsContext: React.Context<SchedulerProps>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the [Scheduler]({% slug api_scheduler_scheduler %}) props.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerPropsContext: () => SchedulerProps;
/**
 * Specifies the result of the [useSchedulerViewsContext]({% slug api_scheduler_useschedulerviewscontext %}) and [SchedulerViewsContext]({% slug api_scheduler_schedulerviewscontext %}).
 */
export declare type SchedulerViewsContextType = SchedulerView[];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerViewsContext: React.Context<React.ReactElement<import("../models").SchedulerViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>[]>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the available Scheduler [views]({% slug views_scheduler %}).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerViewsContext: () => React.ReactElement<import("../models").SchedulerViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>[];
/**
 * Specifies the result of the [useSchedulerFieldsContext]({% slug api_scheduler_useschedulerfieldscontext %}) and [SchedulerFieldsContext]({% slug api_scheduler_schedulerfieldscontext %}).
 */
export declare type SchedulerFieldsContextType = Fields;
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerFieldsContext: React.Context<Fields>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerFieldsContext: () => Fields;
/**
 * Specifies the result of the [useSchedulerFieldsContext]({% slug api_scheduler_useschedulerfieldscontext %}) and [SchedulerFieldsContext]({% slug api_scheduler_schedulerfieldscontext %}).
 */
export declare type SchedulerDateFormatContextType = {
    dateFormat: string;
    shortDateFormat: string;
};
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerDateFormatContext: React.Context<SchedulerDateFormatContextType>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the combined default and custom [modelFields]({% slug api_scheduler_schedulerprops %}#toc-modelfields) of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerDateFormatContext: () => SchedulerDateFormatContextType;
/**
 * Specifies the result of the [useSchedulerGroupsContext]({% slug api_scheduler_useschedulergroupscontext %}) and [SchedulerGroupsContext]({% slug api_scheduler_schedulergroupscontext %}).
 */
export declare type SchedulerGroupsContextType = Group[];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerGroupsContext: React.Context<Group[]>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler `Group` object, calculated based on the [group]({% slug api_scheduler_schedulerprops %}#toc-group) and [resources]({% slug api_scheduler_schedulerprops %}#toc-resources).
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerGroupsContext: () => Group[];
/**
 * Specifies the result of the [useSchedulerDateRangeContext]({% slug api_scheduler_useschedulerdaterangecontext %}) and [SchedulerDateRangeContext]({% slug api_scheduler_schedulerdaterangecontext %}).
 */
export declare type SchedulerDateRangeContextType = DateRange;
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerDateRangeContext: React.Context<DateRange>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the `dateRange` of the current view.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerDateRangeContext: () => DateRange;
/**
 * Specifies the result of the [useSchedulerOrientationContext]({% slug api_scheduler_useschedulerorientationcontext %}) and [SchedulerOrientationContext]({% slug api_scheduler_schedulerorientationcontext %}).
 */
export declare type SchedulerOrientationContextType = Orientation;
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerOrientationContext: React.Context<"horizontal" | "vertical">;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the grouping orientation of the Scheduler.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerOrientationContext: () => "horizontal" | "vertical";
/**
 * Specifies the result of the [useSchedulerDateContext]({% slug api_scheduler_useschedulerdatecontext %}) and [SchedulerDateContext]({% slug api_scheduler_schedulerdatecontext %}).
 */
export declare type SchedulerDateContextType = [Date, (date: Date, event?: any) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerDateContext: React.Context<[Date, (date: Date, event?: any) => void]>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `date` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerDateContext: () => [Date, (date: Date, event?: any) => void];
/**
 * Specifies the result of the [useSchedulerDataContext]({% slug api_scheduler_useschedulerdatacontext %}) and [SchedulerDataContext]({% slug api_scheduler_schedulerdatacontext %}).
 */
export declare type SchedulerDataContextType = [DataItem[], (action: DataAction, event?: any) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerDataContext: React.Context<[any[], (action: DataAction, event?: any) => void]>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `data` reducer.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerDataContext: () => [any[], (action: DataAction, event?: any) => void];
/**
 * Specifies the result of the [useSchedulerActiveViewContext]({% slug api_scheduler_usescheduleractiveviewcontext %}) and [SchedulerActiveViewContext]({% slug api_scheduler_scheduleractiveviewcontext %}).
 */
export declare type SchedulerActiveViewContextType = [string, (activeView: string, event?: any) => void];
/**
 * A [React Context](https://reactjs.org/docs/context.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 */
export declare const SchedulerActiveViewContext: React.Context<[string, (activeView: string, event?: any) => void]>;
/**
 * A custom [React Hook](https://reactjs.org/docs/hooks-intro.html) providing access to the Scheduler internal `activeView` state.
 *
 * For more information, refer to the [Scheduler Context]({% slug context_scheduler %}) article.
 *
 * @returns
 */
export declare const useSchedulerActiveViewContext: () => [string, (activeView: string, event?: any) => void];
/** @hidden */
export declare const SchedulerContext: ({ children, element, props, views, fields, groups, dateRange, dateFormat, orientation, date, data, activeView }: SchedulerContextProps) => JSX.Element;
