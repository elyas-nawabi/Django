"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents the available `action` types for the `SchedulerSlotsFocusAction` objects.
 *
 * The available actions are:
 * - `SLOT_FOCUS_UP`
 * - `SLOT_FOCUS_DOWN`
 * - `SLOT_FOCUS_LEFT`
 * - `SLOT_FOCUS_RIGHT`
 */
var SLOTS_FOCUS_ACTION;
(function (SLOTS_FOCUS_ACTION) {
    SLOTS_FOCUS_ACTION["up"] = "SLOT_FOCUS_UP";
    SLOTS_FOCUS_ACTION["down"] = "SLOT_FOCUS_DOWN";
    SLOTS_FOCUS_ACTION["left"] = "SLOT_FOCUS_LEFT";
    SLOTS_FOCUS_ACTION["right"] = "SLOT_FOCUS_RIGHT";
})(SLOTS_FOCUS_ACTION = exports.SLOTS_FOCUS_ACTION || (exports.SLOTS_FOCUS_ACTION = {}));
/** @hidden */
exports.useSlotsFocus = function (slots) {
    var handleFocusedSlotsAction = function (action, event) {
        switch (action.type) {
            case SLOTS_FOCUS_ACTION.up: {
                if (!action.slot.current || !slots) {
                    return;
                }
                var next = exports.findUpSlot(action.slot, slots);
                if (next && next.current && next.current.element) {
                    event.preventDefault();
                    next.current.element.focus();
                }
                break;
            }
            case SLOTS_FOCUS_ACTION.down: {
                if (!action.slot || !slots) {
                    return;
                }
                var next = exports.findDownSlot(action.slot, slots);
                if (next && next.current && next.current.element) {
                    event.preventDefault();
                    next.current.element.focus();
                }
                break;
            }
            case SLOTS_FOCUS_ACTION.left: {
                if (!action.slot || !slots) {
                    return;
                }
                var next = exports.findLeftSlot(action.slot, slots);
                if (next && next.current && next.current.element) {
                    event.preventDefault();
                    next.current.element.focus();
                }
                break;
            }
            case SLOTS_FOCUS_ACTION.right: {
                if (!action.slot || !slots) {
                    return;
                }
                var next = exports.findRightSlot(action.slot, slots);
                if (next && next.current && next.current.element) {
                    event.preventDefault();
                    next.current.element.focus();
                }
                break;
            }
            default:
                break;
        }
    };
    return [[], handleFocusedSlotsAction];
};
/** @hidden */
exports.findUpSlot = function (target, all) {
    return all.find(function (slot) { return slot.current !== null && target.current !== null
        && slot.current.props.row === target.current.props.row - 1
        && slot.current.props.col === target.current.props.col; });
};
/** @hidden */
exports.findLeftSlot = function (target, all) {
    return all.find(function (slot) { return slot.current !== null && target.current !== null
        && slot.current.props.row === target.current.props.row
        && slot.current.props.col === target.current.props.col - 1; });
};
/** @hidden */
exports.findRightSlot = function (target, all) {
    return all.find(function (slot) { return slot.current !== null && target.current !== null
        && slot.current.props.row === target.current.props.row
        && slot.current.props.col === target.current.props.col + 1; });
};
/** @hidden */
exports.findDownSlot = function (target, all) {
    return all.find(function (slot) { return slot.current !== null && target.current !== null
        && slot.current.props.row === target.current.props.row + 1
        && slot.current.props.col === target.current.props.col; });
};
//# sourceMappingURL=use-slots-focus.js.map