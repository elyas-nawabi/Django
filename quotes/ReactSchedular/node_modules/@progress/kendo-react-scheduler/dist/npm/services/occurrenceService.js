"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_recurrence_1 = require("@progress/kendo-recurrence");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var utils_1 = require("../utils");
/** @hidden */
exports.toOccurrences = function (data, _a) {
    var dateRange = _a.dateRange, fields = _a.fields, timezone = _a.timezone;
    var result = data
        .map(readItem(fields))
        .reduce(occurrenceReducer(dateRange, timezone, fields), [])
        .filter(function (occurrence) { return !utils_1.isMaster(occurrence.dataItem, fields); });
    return result;
};
var readItem = function (fields) { return function (dataItem) {
    var result = {
        uid: kendo_react_common_1.getter(fields.id || 'id')(dataItem),
        start: kendo_react_common_1.getter(fields.start || 'start')(dataItem),
        startTimezone: kendo_react_common_1.getter(fields.startTimezone || 'startTimezone')(dataItem),
        originalStart: kendo_react_common_1.getter(fields.originalStart || 'originalStart')(dataItem),
        end: kendo_react_common_1.getter(fields.end || 'end')(dataItem),
        endTimezone: kendo_react_common_1.getter(fields.endTimezone || 'endTimezone')(dataItem),
        isAllDay: kendo_react_common_1.getter(fields.isAllDay || 'isAllDay')(dataItem),
        title: kendo_react_common_1.getter(fields.title || 'title')(dataItem),
        description: kendo_react_common_1.getter(fields.description || 'description')(dataItem),
        occurrenceId: kendo_react_common_1.getter('occurrenceId')(dataItem),
        recurrenceRule: kendo_react_common_1.getter(fields.recurrenceRule || 'recurrenceRule')(dataItem),
        recurrenceExceptions: kendo_react_common_1.getter(fields.recurrenceExceptions || 'recurrenceExceptions')(dataItem),
        recurrenceId: kendo_react_common_1.getter(fields.recurrenceId || 'recurrenceId')(dataItem),
        dataItem: kendo_react_common_1.clone(dataItem)
    };
    return result;
}; };
var occurrenceReducer = function (dateRange, timezone, fields) { return function (acc, current) {
    return acc.concat(((Boolean(current.recurrenceRule)
        && Boolean(current.recurrenceId === null || current.recurrenceId === undefined)
        && utils_1.isMaster(current.dataItem, fields))
        ? occurrences(current, { dateRange: dateRange, timezone: timezone, fields: fields }).slice() : [current]));
}; };
var occurrences = function (item, _a) {
    var dateRange = _a.dateRange, timezone = _a.timezone, fields = _a.fields;
    var rrule = item.recurrenceRule;
    var rule = kendo_recurrence_1.parseRule({ recurrenceRule: rrule });
    // changed as for display purposes timezone of the scheduler is the correct one
    if (!rule.start) {
        rule.start = kendo_date_math_1.ZonedDate.fromLocalDate(item.start, timezone);
    }
    if (!rule.end) {
        rule.end = kendo_date_math_1.ZonedDate.fromLocalDate(item.end, timezone);
    }
    var exceptionRule = item.recurrenceExceptions;
    if (exceptionRule) {
        rule.exceptionDates = exceptionRule
            .map(function (exDate) {
            return kendo_date_math_1.ZonedDate.fromLocalDate(exDate, timezone);
        });
    }
    var utcRangeStart = utils_1.toUTCDateTime(dateRange.start);
    var utcRangeEnd = utils_1.toUTCDateTime(dateRange.end);
    var series = kendo_recurrence_1.expand(rule, {
        rangeStart: kendo_date_math_1.ZonedDate.fromUTCDate(utcRangeStart, timezone),
        rangeEnd: kendo_date_math_1.ZonedDate.fromUTCDate(utcRangeEnd, timezone)
    });
    if (!series.events.length) {
        return [];
    }
    var expanded = series.events.map(function (occurrence, idx) {
        var occurrenceItem = kendo_react_common_1.clone(item);
        var occurrenceDataItem = kendo_react_common_1.clone(item.dataItem);
        occurrenceItem.recurrenceId = occurrenceItem.uid;
        utils_1.setField(occurrenceDataItem, fields.recurrenceId, item.uid);
        occurrenceItem.originalStart = occurrence.start.toLocalDate();
        utils_1.setField(occurrenceDataItem, fields.originalStart, occurrence.start.toLocalDate());
        occurrenceItem.start = occurrence.start.toLocalDate();
        utils_1.setField(occurrenceDataItem, fields.start, occurrence.start.toLocalDate());
        occurrenceItem.end = occurrence.end.toLocalDate();
        utils_1.setField(occurrenceDataItem, fields.end, occurrence.end.toLocalDate());
        occurrenceItem.occurrenceId = String(idx);
        utils_1.setField(occurrenceDataItem, 'occurrenceId', String(idx));
        occurrenceItem.dataItem = occurrenceDataItem;
        return occurrenceItem;
    });
    return expanded;
};
//# sourceMappingURL=occurrenceService.js.map