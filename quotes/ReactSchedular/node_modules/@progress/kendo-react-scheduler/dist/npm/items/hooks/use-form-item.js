"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kendo_react_common_1 = require("@progress/kendo-react-common");
var context_1 = require("../../context");
var useControlledState_1 = require("../../hooks/useControlledState");
var Scheduler_1 = require("../../Scheduler");
var utils_1 = require("../../utils");
/** @hidden */
var FORM_ITEM_ACTION;
(function (FORM_ITEM_ACTION) {
    FORM_ITEM_ACTION["set"] = "FORM_ITEM_SET";
    FORM_ITEM_ACTION["setMaster"] = "FORM_ITEM_SET_MASTER";
    FORM_ITEM_ACTION["reset"] = "FORM_ITEM_RESET";
    FORM_ITEM_ACTION["complete"] = "FORM_ITEM_COMPLETE";
})(FORM_ITEM_ACTION = exports.FORM_ITEM_ACTION || (exports.FORM_ITEM_ACTION = {}));
/** @hidden */
exports.useFormItem = function (config, state) {
    var _a = useControlledState_1.useControlledState.apply(void 0, state), formItem = _a[0], setFormItem = _a[1];
    var fields = context_1.useSchedulerFieldsContext();
    var data = context_1.useSchedulerDataContext()[0];
    var handleFormItemAction = function (action, event) {
        var newFormItem;
        switch (action.type) {
            case FORM_ITEM_ACTION.set:
                newFormItem = action.payload;
                break;
            case FORM_ITEM_ACTION.reset:
                newFormItem = null;
                break;
            case FORM_ITEM_ACTION.setMaster:
                newFormItem = kendo_react_common_1.clone(utils_1.findMaster(action.payload, fields, data));
                break;
            case FORM_ITEM_ACTION.complete:
                if (config.onDataAction && formItem) {
                    config.onDataAction.call(undefined, {
                        type: Scheduler_1.DATA_ACTION.update,
                        series: config.series,
                        dataItem: action.payload
                    });
                    newFormItem = null;
                }
                break;
            default:
                newFormItem = formItem;
                break;
        }
        setFormItem(newFormItem, event);
    };
    return [formItem, setFormItem, handleFormItemAction];
};
//# sourceMappingURL=use-form-item.js.map